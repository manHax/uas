# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'uas.py'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import numpy as np
import sys
import csv
import networkx as nx
from nltk.tokenize.punkt import PunktSentenceTokenizer
from sklearn.feature_extraction.text import TfidfTransformer, CountVectorizer
import re
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QDialog
from bs4 import BeautifulSoup
import requests

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(827, 632)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setEnabled(False)
        self.lineEdit.setGeometry(QtCore.QRect(10, 30, 541, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 47, 13))
        self.label.setObjectName("label")
        self.crawl = QtWidgets.QPushButton(self.centralwidget)
        self.crawl.setEnabled(False)
        self.crawl.setGeometry(QtCore.QRect(650, 30, 75, 31))
        self.crawl.setObjectName("crawl")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 47, 13))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 340, 111, 16))
        self.label_3.setObjectName("label_3")
        self.summ = QtWidgets.QPushButton(self.centralwidget)
        self.summ.setEnabled(False)
        self.summ.setGeometry(QtCore.QRect(730, 30, 75, 31))
        self.summ.setObjectName("summ")
        self.openfile = QtWidgets.QPushButton(self.centralwidget)
        self.openfile.setEnabled(False)
        self.openfile.setGeometry(QtCore.QRect(570, 30, 75, 31))
        self.openfile.setObjectName("openfile")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setEnabled(False)
        self.textEdit.setGeometry(QtCore.QRect(10, 90, 801, 251))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setEnabled(False)
        self.textEdit_2.setGeometry(QtCore.QRect(10, 360, 801, 231))
        self.textEdit_2.setObjectName("textEdit_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 827, 21))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuText_sum = QtWidgets.QMenu(self.menubar)
        self.menuText_sum.setObjectName("menuText_sum")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.file = QtWidgets.QAction(MainWindow)
        self.file.setEnabled(True)
        self.file.setObjectName("file")
        self.webb = QtWidgets.QAction(MainWindow)
        self.webb.setObjectName("webb")
        self.about = QtWidgets.QAction(MainWindow)
        self.about.setObjectName("about")
        self.actionAbout_2 = QtWidgets.QAction(MainWindow)
        self.actionAbout_2.setObjectName("actionAbout_2")
        self.menuHelp.addAction(self.about)
        self.menuHelp.addAction(self.actionAbout_2)
        self.menuText_sum.addAction(self.file)
        self.menuText_sum.addAction(self.webb)
        self.menubar.addAction(self.menuText_sum.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.actionMengetik = QtWidgets.QAction(MainWindow)
        self.actionMengetik.setObjectName("actionMengetik")
        self.menuText_sum.addAction(self.actionMengetik)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.openfile.clicked.connect(self.hfile)
        self.crawl.clicked.connect(self.hweb)
        self.summ.clicked.connect(self.hring)

        self.file.triggered.connect(self.setModefile)
        self.webb.triggered.connect(self.setModeweb)
        self.actionMengetik.triggered.connect(self.setModeket)

        self.about.triggered.connect(self.hhelp)
        self.actionAbout_2.triggered.connect(self.habout)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Aplikasi Meringkas Text"))
        self.label.setText(_translate("MainWindow", "URL ="))
        self.crawl.setText(_translate("MainWindow", "Crawl"))
        self.label_2.setText(_translate("MainWindow", "Text ="))
        self.label_3.setText(_translate("MainWindow", "Text Summarization ="))
        self.summ.setText(_translate("MainWindow", "Ringkaskan"))
        self.openfile.setText(_translate("MainWindow", "Open File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuText_sum.setTitle(_translate("MainWindow", "Text sum"))
        self.file.setText(_translate("MainWindow", "From File"))
        self.webb.setText(_translate("MainWindow", "From Website"))
        self.about.setText(_translate("MainWindow", "Help"))
        self.actionAbout_2.setText(_translate("MainWindow", "About"))
        self.actionMengetik.setText(_translate("MainWindow", "Mengetik"))

        
    def hfile(self):
        fname= QFileDialog.getOpenFileName()
        path = fname[0]
        self.summ.setEnabled(True)

        with open(path, "r") as f:
            self.rtx=""
            for zz in f:
                print(zz)
                self.rtx+=zz
        self.textEdit.setText(self.rtx)
        self.textEdit.setEnabled(True)
            
    def hweb(self):

        url = self.lineEdit.text()
        print(url)
        pass
        req = requests.get(url)
        soup = BeautifulSoup(req.text, "html.parser")

        main = soup.find(id="mw-content-text")
        p=main.find_all("p")
        self.rtx=""
        for pp in p:
            self.rtx+=pp.get_text()

        self.textEdit.setText(self.rtx)
        self.textEdit.setEnabled(True)
        self.summ.setEnabled(True)

    def habout(self):
        self.textEdit.setEnabled(False)
        self.textEdit_2.setEnabled(False)
        self.label.setText('Author =')
        self.lineEdit.setText('>>> LUQMANUL HAKIM - 170411100062 [https://github.com/manHax/]')

        self.label_2.setText('Aplikasi =')
        self.textEdit.setText('Dibuat untuk memenuhi Tugas mata kuliah WEB MINING\r\n\r\nBatasan :\r\n> Web sum :\r\nAplikasi hanya dapat mengcrawl data text dari website Wikipedia dikarenakan setiap website mempunyai struktur berbeda yang mana berpengaruh pada struktur crawling.\r\n\r\n> Text sum :\r\nTidak semua file dapat dibuka oleh aplikasi')

        self.label_3.setText('Pengembangan =')
        self.textEdit_2.setText('Aplikasi ini dapat dikembangkan dengan menambahkan menu dimana user dapat mensetting id class dari sebuah susunan website yang akan dicrawling.')

    def hhelp(self):
        self.textEdit.setEnabled(False)
        self.textEdit_2.setEnabled(False)
        self.label.setText('Author =')
        self.lineEdit.setText('>>> LUQMANUL HAKIM - 170411100062 [https://github.com/manHax/]')

        self.label_2.setText('Fitur =')
        self.textEdit.setText('> Meringkas Text dari File txt, py, js ..etc (Akan tetapi tidak semua file berbasis tulisan dapat ditangani)\r\n> Meringkas Text dari situs wikipedia\r\n> Meringkas Text dari ketikan sendiri\r\n> Export hasil ringkasan dalam bentuk file txt')

        self.label_3.setText('Penggunaan Aplikasi=')
        self.textEdit_2.setText('> Meringkas Text dari File \r\n= pilih sub menu from file pada menu Text sum\r\n= pilih file yang dikehendaki\r\n= (jika text dari file sudah ditampilkan) klik tombol ringkas\r\n= file txt akan otomatis dibuat\r\n\r\n> Meringkas Tulisan dari situs wikipedia\r\n= pilih sub menu from website pada menu Text sum\r\n= masukkan url website wikipedia\r\n= (jika text dari website sudah ditampilkan) klik tombol ringkas\r\n\r\n> Meringkas Tulisan dari Pengetikan\r\n= pilih sub menu mengetik pada menu Text sum\r\n= masukkan kalimat pada isian ketik\r\n= (jika text dari website sudah ditampilkan) klik tombol ringkas')

    def ringkasan(self):
        array_text=[]
        text=' '.join(re.sub("(@[A-Za-z1-9]+)|(\w+:\/\/\S+)"," ",self.inputTeks).split())
        text = re.sub('<[^>]*>', '', text) #menghilangkan tanda baca
        #text = re.sub("\d+", "", inputTeks) #menghilangkan angka
        emoticons = re.findall('(?::|;|=)()(?:-)?(?:\)|\(|D|P)',text) #menghilangkan emoticon
        #text = (re.sub('[\W]+', ' ', text.lower()) + ' '.join(emoticons).replace('-', '')) #membuat semua huruf menjadi lower case
        array_text.append(text)

        for teks in array_text:
            document = teks

        doc_tokenizer = PunktSentenceTokenizer()
        sentences_list = doc_tokenizer.tokenize(document)

        cv = CountVectorizer()
        cv_matrix = cv.fit_transform(sentences_list)
        a=cv_matrix.toarray()

        normal_matrix = TfidfTransformer().fit_transform(cv_matrix)
        tfidf=normal_matrix.toarray()

        vektorkalimat=normal_matrix.toarray()
        A=vektorkalimat[0]
        B=vektorkalimat[2]
        dot = np.dot(A, B)
        norma = np.linalg.norm(A)
        normb = np.linalg.norm(B)
        cos = dot / (norma * normb)

        A=normal_matrix.T

        res_graph = normal_matrix * normal_matrix.T # similaritas /adjacency matrix
        G=res_graph.toarray()

        G = nx.from_numpy_matrix(np.matrix(G), create_using=nx.DiGraph)

        nx_graph=nx.from_scipy_sparse_matrix(res_graph)


        pageranks = nx.pagerank(nx_graph)
        sentence_array = sorted(((pageranks[i], s) for i, s in enumerate(sentences_list)), reverse=True)
        sentence_array = np.asarray(sentence_array)

        rank_max = float(sentence_array[0][0])
        rank_min = float(sentence_array[len(sentence_array) - 1][0])

        temp_array = []

        # Jika semua rank sama
        # taking any sentence will give the summary, say the first sentence
        flag = 0
        if rank_max - rank_min == 0:
            temp_array.append(0)
            flag = 1

        # If the sentence has different ranks
        if flag != 1:
            for i in range(0, len(sentence_array)):
                temp_array.append((float(sentence_array[i][0]) - rank_min) / (rank_max - rank_min))

        print(len(temp_array))
        print(temp_array)
        print(sentence_array[4],[0])

        threshold = (sum(temp_array) / len(temp_array))

        sentence_list = []
        if len(temp_array) > 1:
            for i in range(0, len(temp_array)):
                if temp_array[i] > threshold:
                        sentence_list.append(sentence_array[i][1])
        else:
            sentence_list.append(sentence_array[0][1])

        summary = " ".join(str(x) for x in sentence_list)
        print(summary)
        # save the data in another file, names sum.txt
        if self.modesum=="web":
            namaf='ringkasan_url.txt'
        else:
            namaf='ringkasan_file.txt'
        f = open(namaf, 'w+')
        #print(type(f))
        f.write("\n")
        f.write(summary)
        f.close()

        self.akhir = summary
        

    def hring(self):
        #PREPOCESSING
        if self.modesum=="ket":
            self.inputTeks = self.textEdit.toPlainText()
        else:
            self.inputTeks = self.rtx
        try:
            self.ringkasan()
            self.textEdit_2.setText(self.akhir)
            self.textEdit_2.setEnabled(True)
        except:
            self.textEdit_2.setText("Gagal Meringkas")
            self.textEdit_2.setEnabled(False)
        
           
    def setModeket(self):
        self.label.setText('')
        self.textEdit.clear()
        self.textEdit_2.clear()
        self.lineEdit.setText(' >> Ketikkan kalimat dibawah ini >>>')
        self.label_2.setText('Ketik =')
        self.label_3.setText('Text Summarization =')
        self.modesum="ket"
        self.crawl.setEnabled(False)
        self.lineEdit.setEnabled(False)
        self.summ.setEnabled(True)
        self.openfile.setEnabled(False)
        self.textEdit.setEnabled(True)
        

    def setModeweb(self):
        self.textEdit.clear()
        self.textEdit_2.clear()
        self.label.setText('URL =')
        self.label_2.setText('Text =')
        self.label_3.setText('Text Summarization =')
        self.modesum="web"
        self.crawl.setEnabled(True)
        self.openfile.setEnabled(False)
        self.summ.setEnabled(False)
        self.lineEdit.setEnabled(True)
        self.lineEdit.clear()

        
    def setModefile(self):
        self.label.setText('')
        self.lineEdit.setText(' >> Buka File >>>')
        self.label_2.setText('Text =')
        self.label_3.setText('Text Summarization =')
        self.modesum="file"
        self.crawl.setEnabled(False)
        self.lineEdit.setEnabled(False)
        self.summ.setEnabled(False)
        self.openfile.setEnabled(True)
        self.textEdit.clear()
        self.textEdit_2.clear()
       


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
